#
#   Setting facts section
#

- set_fact:
    flex: unknown

- name: find flex instance
  set_fact:
    flex: "{{ lookup('template','/etc/ansible/roles/all-confluence-refresh/templates/flex.j2') | replace('\n','') }}"
  delegate_to: 127.0.0.1

- name: find windows diskspace (shell)
  win_shell: $disk = get-WmiObject win32_logicaldisk -Filter 'DeviceID="C:"' | Select-Object Size ; $disk = ($disk.size/1GB) ; $disk = $('{0:#.0}GB' -f $disk) ; Write-Host $disk -NoNewLine
  register: out
  changed_when: false
  when:
    - ansible_os_family is defined
    - ansible_os_family == 'Windows'

- name: find diskspace (windows)
  set_fact:
    diskspace: "{{- out.stdout }}"
  when:
    - ansible_os_family is defined
    - ansible_os_family == 'Windows'

- name: find RAM total (linux)
  set_fact:
    mem_total: "{{ (ansible_memtotal_mb/1024)|round|int }}GB"
  when:
    - ansible_os_family is not defined or ansible_os_family != 'Windows'

- name:  find RAM total (Windows)
  set_fact:
#    mem_total: "{{ factor_memorysize }}"
    mem_total: "{{ (ansible_memtotal_mb/1024)|round|int }}GB"
  when:
    - ansible_os_family is defined
    - ansible_os_family == 'Windows'

- name: find diskspace (Linux)
  set_fact:
    diskspace: "{{ ansible_devices.sda.size }}"
  when:
    - ansible_os_family is not defined or ansible_os_family != 'Windows'

- name: set ip_address (linux)
  set_fact:
    ip_address: "{{ ansible_all_ipv4_addresses[0] }}"
  when:
    - ansible_all_ipv4_addresses[0] is defined
    - ansible_distribution != 'Windows'

- name: set ip_address (Windows)
  set_fact:
    ip_address: "{{ ansible_ip_addresses[3] }}"
  when:
    - ansible_ip_addresses[2] is defined
    - ansible_os_family is defined
    - ansible_os_family == 'Windows'


#
#   Delete all child pages section
#
- name: get child page
  uri:
    url: "{{ confluence_url }}?spaceKey={{ space }}&title={{ prefix }}+{{ ansible_hostname }}+-+{{ Local_name }}&expand=version"
    HEADER_Content-Type: "application/json"
    method: GET
    user: "{{ confluence_user }}"
    password: "{{ confluence_pass }}"
    return_content: yes
    force_basic_auth: yes
  delegate_to: 127.0.0.1
  register: page_to_delete

- name: delete child
  uri:
    url: "{{ confluence_url }}/{{ page_to_delete.json.results[0].id }}"
    HEADER_Content-Type: "application/json"
    method: DELETE
    user: "{{ confluence_user }}"
    password: "{{ confluence_pass }}"
    return_content: yes
    force_basic_auth: yes
    status_code: 204
  delegate_to: 127.0.0.1
  when:
    - page_to_delete.json.results[0].id is defined


#
#   Delete List of VMs page section
#

- name: get "List of VMs" page
  uri:
    url: "{{ confluence_url }}?spaceKey={{ space }}&title={{ prefix }}+List+Of+VMs&expand=version"
    HEADER_Content-Type: "application/json"
    method: GET
    user: "{{ confluence_user }}"
    password: "{{ confluence_pass }}"
    return_content: yes
    force_basic_auth: yes
  delegate_to: 127.0.0.1
  run_once: true
  register: list_of_vms

- name: Trash "List of VMs" page
  uri:
    url: "{{ confluence_url }}/{{ list_of_vms.json.results[0].id }}"
    HEADER_Content-Type: "application/json"
    method: DELETE
    user: "{{ confluence_user }}"
    password: "{{ confluence_pass }}"
    return_content: yes
    force_basic_auth: yes
    status_code: 204
  delegate_to: 127.0.0.1
  run_once: true
  register: trash
  when:
    - list_of_vms.json.results[0].id is defined

#
#   Create pages section
#

- name: create List of VMs page
  uri:
    url: "{{ confluence_url }}/"
    HEADER_Content-Type: "application/json"
    method: POST
    body : "{{ lookup('template','/etc/ansible/roles/all-confluence-refresh/templates/createpage_list.j2') }}"
    body_format: json
    user: "{{ confluence_user }}"
    password: "{{ confluence_pass }}"
    return_content: yes
    force_basic_auth: yes
    status_code: 200
  delegate_to: 127.0.0.1
  run_once: true

- name: get "List of VMs" page
  uri:
    url: "{{ confluence_url }}?title={{ prefix }}List+Of+VMs&expand=version"
    HEADER_Content-Type: "application/json"
    method: GET
    user: "{{ confluence_user }}"
    password: "{{ confluence_pass }}"
    return_content: yes
    force_basic_auth: yes
  delegate_to: 127.0.0.1
  run_once: true
  register: list

- name: create page as child of List of VMs
  uri:
    url: "{{ confluence_url }}/"
    HEADER_Content-Type: "application/json"
    method: POST
    body : "{{ lookup('template','/etc/ansible/roles/all-confluence-refresh/templates/createpage.j2') }}"
    body_format: json
    user: "{{ confluence_user }}"
    password: "{{ confluence_pass }}"
    return_content: yes
    force_basic_auth: yes
    status_code: 200
  delegate_to: 127.0.0.1
  notify:
    - get contents (shell)

#
#   Group File Section
#

- name: create group file
  template:
    src: confluencetable_begin.j2
    dest: "/tmp/group_{{ Group }}"
  changed_when: false
  delegate_to: 127.0.0.1

- name: add page to group file
  lineinfile:
    dest: "/tmp/group_{{ Group }}"
    line: "{{ lookup('template','/etc/ansible/roles/all-confluence-refresh/templates/confluencetable_block.j2') }}"
    insertafter: EOF
    state: present
  changed_when: false
  delegate_to: 127.0.0.1

- name: close group files
  lineinfile:
    dest: "/tmp/group_{{ Group }}"
    line: "</tr></tbody></table></div><br></br>"
    insertafter: EOF
  changed_when: true
  delegate_to: 127.0.0.1
  notify:
    - get contents (shell)